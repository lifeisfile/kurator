package logic

import (
	"fmt"
	"strings"

	"github.com/getsentry/raven-go"
	"github.com/gomodule/redigo/redis"
	"gl.biggo.pro/devopstrain/libs/storage"
)

type StatusResult struct {
	Status string
}
type OutputResult struct {
	ResultType     string
	ResultContents string
	IsReady        bool
}

type CheckStatusResult struct {
	Status   string
	Expected string
	Current  string
	ETASelf  int `json:"ETASelf,omitempty"`
}

type RequestHandler struct {
	Method                 string `json:"method"`
	CourseName             string `json:"courseName"`
	TaskNumber             int    `json:"taskNumber"`
	CacheKey               string `json:"cacheKey"`
	KuratorCommandOutput   string `json:"kuratorCommandOutput"`   // sets based on local command execution
	KuratorCommandExitCode int    `json:"kuratorCommandExitCode"` // sets based on local command execution
	BoolResponse           bool              `json:"boolResponse"`
	FilesBase64            map[string]string `json:"filesBase64"`
	UserID                 int64  `json:"userID"`                 // sets internally
	IsPaid                 bool   `json:"isPaid"`                 // sets internally
}

func wrapMarkdownCode(code string) string {
	res := "```\n"
	res += code
	res += "```"
	return res
}

func wrapFromCache(code string) string {
	res := "*(Ниже ранее сохраненный результат)* \n\n"
	res += code
	return res
}

func CheckBlockCache(userID int64, blockName, cacheKey string) string {
	if cacheKey == "" {
		return ""
	}
	key := fmt.Sprintf("cache-%s-%s-%d", blockName, cacheKey, userID)
	rc := storage.RedisClient()
	s, err := redis.String(rc.Do("GET", key))
	if err != nil {
		if err.Error() != "redigo: nil returned" {
			raven.CaptureError(err, nil)
		}
	}
	return s
}

func UpdateBlockCache(userID int64, blockName, cacheKey, content string) {
	if cacheKey == "" {
		return
	}
	key := fmt.Sprintf("cache-%s-%s-%d", blockName, cacheKey, userID)
	rc := storage.RedisClient()
	rc.Do("SET", key, content)
}

func GetTextColumn(t, linePattern string, column int) string {
	var out string
	for _, lineStr := range strings.Split(t, "\n") {
		if strings.Contains(lineStr, linePattern) {
			columns := strings.Fields(lineStr)
			if len(columns) >= column {
				return columns[column-1]
			}
		}
	}
	return out
}

func StatusGeneral(rh *RequestHandler, path string) (StatusResult, error) {

	// rand.Seed(time.Now().UnixNano())
	// randomNumber := rand.Intn(10101010)

	path = strings.Replace(path, "status_", "", -1)

	resultJSON, err := storage.ReadObj(fmt.Sprintf("somekeystatus%s", path))
	if err != nil {
		return StatusResult{}, err
	}
	status := "not_done"
	if string(resultJSON) == `"true"` {
		status = "done"
	}
	return StatusResult{Status: status}, nil

}

func CheckGeneral(rh *RequestHandler, path string) (CheckStatusResult, error) {

	// CODE FOR CHECK

	// rand.Seed(time.Now().UnixNano())
	// randomNumber := rand.Intn(10101010)
	path = strings.Replace(path, "check_", "", -1)

	status := "user_error"
	res := CheckStatusResult{Status: status}

	res.Status = "done"
	err := storage.SaveObj(fmt.Sprintf("somekey%s", path), "true")
	if err != nil {
		fmt.Println(err)
		raven.CaptureError(err, nil)
	}

	res.Expected = "Configmap **sample-config** должен быть создан"
	res.Current = wrapMarkdownCode("somecontents")
	return res, nil

}